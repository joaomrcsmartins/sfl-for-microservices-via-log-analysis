input {
  rabbitmq {
    host => "localhost"
    port => 5672
    subscription_retry_interval_seconds => 5
    exchange => "pet-a-pet-good-logs"
    exchange_type => "direct"
    key => "pet-a-pet-good-logs"
    codec => "plain"
    durable => true
  }
  rabbitmq {
    host => "localhost"
    port => 5672
    subscription_retry_interval_seconds => 5
    exchange => "pet-a-pet-bad-logs"
    exchange_type => "direct"
    key => "pet-a-pet-bad-logs"
    codec => "plain"
    durable => true
  }
}
filter {
  grok {
    match => {
      "message" => [
      "%{TIMESTAMP_ISO8601:timestamp} :: %{LOGLEVEL:logLevel} :: Service: %{WORD:microserviceName} - Request ID: %{NUMBER:correlationID} -> In %{JAVACLASS:fileName}/%{JAVAFILE:className}/%{JAVAMETHOD:methodName}\(\):%{NUMBER:line:int} - %{DATA:message}"
      ]
    }
  }
  grok {
    match => {
      "message" => [
      "\"%{DATA:user}\"%{GREEDYDATA}",
      "%{WORD} \"%{DATA:user}\"%{GREEDYDATA}"
      ]
    }
  }
  mutate {
    # remove unnecessary fields
    remove_field => ["event", "@version", "@timestamp"]
  }
}

output {

  if [logLevel] == "INFO" {
    rabbitmq {
      host => "localhost"
      exchange => "logstash-output-good"
      port => 5672
      exchange_type => "direct"
      key => "logstash-output-good"
      durable => true
      persistent => false
    }
  }
  else {
    stdout {}
    rabbitmq {
      host => "localhost"
      exchange => "logstash-output-bad"
      port => 5672
      exchange_type => "direct"
      key => "logstash-output-bad"
      durable => true
      persistent => false
    }
  }
}
