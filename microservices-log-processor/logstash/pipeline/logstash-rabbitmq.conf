input {
  file {
    path => "/data/file/*.log"
    # mode => "tail" # by default mode is "tail"
  }
  rabbitmq {
    host => "localhost"
    port => 5672
    subscription_retry_interval_seconds => 5
    exchange => "logstash-input"
    exchange_type => "direct"
    key => "logstash-input"
    codec => "plain"
    # user => "guest" # by default user is "guest"
    # password => "guest" # # by default password is "guest"
  }
  elasticsearch {
    hosts => ["192.168.56.1"]
    index => "logstash-input-elasticsearch"
    query => '{ "query": { "match": { "clientip": "66.249.73.135" } }, "sort": [ "_doc" ] }'
    scroll => "5m"
    docinfo => true
    user => "elastic"
    password => "qBNkdczh2IBHwuA1IBzc" # do not use in plaintext
  }
}

filter {
  grok {
    match => {
      "message" => [
        # match logs from file input
        "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:logLevel}%{SPACE}%{JAVAFILE:className}:%{NUMBER:logLine:int} - %{GREEDYDATA:logMessage}",
        # match logs from rabbitmq input
        "%{MONTHNUM:month}/%{YEAR:year}%{SPACE}%{TIME:time} %{LOGLEVEL:loglevel}%{SPACE}:\.*%{DATA:action}: interface %{IPORHOST:entity_interface_ip}, %{GREEDYDATA:log_message}",
        "%{MONTHNUM:month}/%{YEAR:year}%{SPACE}%{TIME:time} %{LOGLEVEL:loglevel}%{SPACE}:\.*%{DATA:action}: %{GREEDYDATA:log_message}",
        # match logs from elasticsearch input
        "%{COMBINEDAPACHELOG}"
      ] 
    }
  }
  mutate {
    # remove unnecessary fields
    remove_field => ["event", "@version", "log"]
  }
}

output {
  # only send correctly parsed logs
  #if "_grokparsefailure" not in [tags] {
    rabbitmq {
      host => "localhost"
      exchange => "logstash-output"
      port => 5672
      exchange_type => "direct"
      key => "logstash-output"
      # user => "guest"
      # password => "guest"
      # codec => "json" # by default its json
    }
  #}
}