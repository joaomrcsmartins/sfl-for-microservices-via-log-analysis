input {
    gelf {
        # Depends on docker network address
        # Should be 172.XX.0.2
        host => "172.18.0.2" 
        port => 12201
    }
}

filter {
    prune {
            blacklist_names => ["@version", "created","container_id","command",
            "version","image_id","image_name","tag"]
        }
    grok {
        break_on_match => false
        match => {
            "container_name" => "%{GREEDYDATA:microserviceName}-%{INT}"
        }
    }
    mutate {
        rename => {
            "level" => "logLevel"
            "source_host" => "instanceIP"
        }
        convert => {
            "logLevel" => "string"
        }
    }
    prune {
        blacklist_names => ["container_name","host"]
    }
    if [microserviceName] =~ /^robot-shop-(web|ratings)$/ {
        grok {
            match => {
                "message" => "%{COMMONAPACHELOG}"
            }
        }
        grok {
            break_on_match => false
            match => {
                "[http][response][status_code]" => "%{NUMBER:httpCode:int}"
                "[url][original]" => "%{GREEDYDATA:endpoint}"
            }
        }
        prune {
            blacklist_names => ["url", "^http$","source"]
        }
    }
    else if [microserviceName] =~ /^robot-shop-(user|cart|catalogue)$/ {
        json {
            source => "message"
        }
        if [name] =~ /.*instana.*/ {
            drop {}
        }
        grok {
            break_on_match => false
            match => {
                "[res][statusCode]" => "%{NUMBER:httpCode:int}"
                "[req][url]" => "%{GREEDYDATA:endpoint}"
            }
        }
        mutate {
            # copy => {
            #     "[req][id]" => "correlationID"
            # }
            rename => {
                "msg" => "message"
                "level" => "logLevel"
                "responseTime" => "durationProcessing"
            }
            # convert => {
            #     "correlationID" => "string"
            # }
        }
        prune {
            blacklist_names => ["^res$","^time$","hostname","^req$","pid","^v$"]
        }
    }
    # Analyze better message content
    else if [microserviceName] == "robot-shop-shipping" {
        grok {
            match => {
                "message" => "%{TIMESTAMP_ISO8601}%{SPACE}%{LOGLEVEL:logLevel}%{SPACE}%{INT} --- %{SYSLOG5424SD}%{SPACE}%{JAVACLASS:endpoint}  : %{JAVALOGMESSAGE:message}"
            }
            overwrite => ["message", "logLevel"]
        }
    }
    else if [microserviceName] == "robot-shop-payment" {
        grok {
            match => {
                "message" => "%{SYSLOG5424SD} %{IP:instanceIP} \(%{DATA}\) \{%{CISCO_REASON}} \[%{HTTPDERROR_DATE}] %{WORD} %{URIPATH:endpoint}%{GREEDYDATA} \(%{GREEDYDATA} %{INT:httpCode}\) %{GREEDYDATA}"
            }
            overwrite => ["instanceIP"]
        }
    }
    else if [microserviceName] == "robot-shop-rabbitmq" {}
    else { 
        # dispatch, redis, mongodb, mysql
        drop {}
    }
    mutate {
        rename => {
            "@timestamp" => "timestamp"
        }
        convert => {
            "timestamp" => "string"
        }
    }
}

output {
    file {
        # path => "/data/test_logs/load-gen-bad.log"
        path => "/data/test_logs/load-gen-good.log"
    } 
}