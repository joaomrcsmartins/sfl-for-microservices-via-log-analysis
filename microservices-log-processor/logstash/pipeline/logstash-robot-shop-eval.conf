input {
    # rabbitmq {
    #     host => "localhost"
    #     port => 5672
    #     subscription_retry_interval_seconds => 5
    #     exchange => "robot-shop-good-logs"
    #     exchange_type => "direct"
    #     key => "robot-shop-good-logs"
    #     codec => "json"
    #     durable => true
    #     add_field => {
    #         "good_logs" => true
    #     }
    # }
    # rabbitmq {
    #     host => "localhost"
    #     port => 5672
    #     subscription_retry_interval_seconds => 5
    #     exchange => "robot-shop-bad-logs"
    #     exchange_type => "direct"
    #     key => "robot-shop-bad-logs"
    #     codec => "json"
    #     durable => true
    #     add_field => {
    #         "good_logs" => false
    #     }
    # }
    file {
        path => "/data/test_logs/**/**/**.log"
        codec => "json"
        add_field => {
            "good_logs" => false
        }
        mode => "read"
        exit_after_read => true
    }
}
filter {
    # /begin Good logs filtering - instead of relying on the source, analyze http codes and check log message for "error"s to mark log as good/faulty
    # Comment/Uncomment to enable this configuration
    # 
    # if the http code is present and is error (400|500) or the log message contains an error mark it as an error
    # if ([httpCode] and [httpCode] >= 400) or [message] =~ /.*?((?i)error).*/ {
    #     mutate {
    #         replace => {
    #             "good_logs" => false
    #         }
    #     }
    # }
    # otherwise the logs are good
    # else {
    #     mutate {
    #         replace => {
    #             "good_logs" => true
    #         }
    #     }
    # }
    # 
    # /end Good logs filtering

    # /begin Endpoint to methodInvocation - consider service endpoints as methodInvocations, since a lot of services handle endpoints in a single method
    # Comment/Uncomment to enable this configuration
    # To enable the configuration on set of services, add them to the list inside the regex expression. E.g: /.*?(payment|shipping|web|[add new service here]).*/
    # 
    # if [microserviceName] =~ /.*?(payment|shipping|web).*/ {
    if [endpoint] {
        grok {
            match => {
                "endpoint" => "(?'methodInvocation'\/[\/a-z_-]*)(?=$|\/).*"
            }
        }
        # /**/cities and /**/search may contain lowercase arguments in the path, must be removed
        if [methodInvocation] =~ /.*(\/cities\/|\/search\/).*/ {
            grok {
                match => {
                    "methodInvocation" => "(?'methodInvocation'.*(\/cities|\/search)).*"
                }
                overwrite => ["methodInvocation"]
            }
        }
        mutate {
            rename => {
                "methodInvocation" => "[methodInvocation][methodName]"
            }
        }
    }
    # }
    # 
    # /end Endpoint to methodInvocation

    grok {
        match => {
            "[log][file][path]" => "/data/test_logs/%{GREEDYDATA:log_path}.log"
        }
    }


    mutate {
        # remove unnecessary fields
        remove_field => ["event", "@version", "@timestamp","tags","host","log"]
    }
}
output {
    file {
        path => "/data/test_logs/%{log_path}-out.log"
    }
    # if [good_logs] == "true" {
    #     # rabbitmq {
    #     #     host => "localhost"
    #     #     exchange => "logstash-output-good"
    #     #     port => 5672
    #     #     exchange_type => "direct"
    #     #     key => "logstash-output-good"
    #     #     durable => true
    #     #     persistent => false
    #     # }
    #     file {
    #         path => "/data/test_logs/filtered/load-gen-good.log"
    #     }
    # }
    # else {
    #     # rabbitmq {
    #     #     host => "localhost"
    #     #     exchange => "logstash-output-bad"
    #     #     port => 5672
    #     #     exchange_type => "direct"
    #     #     key => "logstash-output-bad"
    #     #     durable => true
    #     #     persistent => false
    #     # }
    #     file {
    #         path => "/data/test_logs/filtered/load-gen-bad.log"
    #     }
    # }
}