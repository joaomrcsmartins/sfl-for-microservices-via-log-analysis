input {
    rabbitmq {
        host => "localhost"
        port => 5672
        subscription_retry_interval_seconds => 5
        exchange => "robot-shop-good-logs"
        exchange_type => "direct"
        key => "robot-shop-good-logs"
        codec => "json"
        durable => true
        add_field => {
            "good_logs" => true
        }
    }
    rabbitmq {
        host => "localhost"
        port => 5672
        subscription_retry_interval_seconds => 5
        exchange => "robot-shop-bad-logs"
        exchange_type => "direct"
        key => "robot-shop-bad-logs"
        codec => "json"
        durable => true
        add_field => {
            "good_logs" => false
        }
    }
    # file {
    #     path => "/data/test_logs/load-gen-bad.log"
    #     codec => "json"
    #     add_field => {
    #         "good_logs" => false
    #     }
    #     mode => "read"
    #     exit_after_read => true
    # }
    # file {
    #     path => "/data/test_logs/load-gen-good.log"
    #     codec => "json"
    #     add_field => {
    #         "good_logs" => true
    #     }
    #     mode => "read"
    #     exit_after_read => true
    # }
}
filter {
    # if the http code is present and is error (400|500) or the log message contains an error mark it as an error
    if ([httpCode] and [httpCode] >= 400) or [message] =~ /.*?((?i)error).*/ {
        mutate {
            replace => {
                "good_logs" => false
            }
        }
    }
    # otherwise the logs are good
    else {
        mutate {
            replace => {
                "good_logs" => true
            }
        }
    }
    # consider method invocation of the endpoint
    if [endpoint] {
        grok {
            match => {
                "endpoint" => "(?'methodInvocation'\/[\/a-z_-]*)(?=$|\/).*"
            }
        }
        # /**/cities and /**/search may contain lowercase arguments in the path, must be removed
        if [methodInvocation] =~ /.*(\/cities\/|\/search\/).*/ {
            grok {
                match => {
                    "methodInvocation" => "(?'methodInvocation'.*(\/cities|\/search)).*"
                }
                overwrite => ["methodInvocation"]
            }
        }
        mutate {
            rename => {
                "methodInvocation" => "[methodInvocation][methodName]"
            }
        }
    }
    mutate {
        # remove unnecessary fields
        remove_field => ["event", "@version", "@timestamp","tags","host","log"]
    }
}
output {
    if [good_logs] == "true" {
        rabbitmq {
            host => "localhost"
            exchange => "logstash-output-good"
            port => 5672
            exchange_type => "direct"
            key => "logstash-output-good"
            durable => true
            persistent => false
        }
        # file {
        #     path => "/data/test_logs/filtered/load-gen-good.log"
        # }
    }
    else {
        rabbitmq {
            host => "localhost"
            exchange => "logstash-output-bad"
            port => 5672
            exchange_type => "direct"
            key => "logstash-output-bad"
            durable => true
            persistent => false
        }
        # file {
        #     path => "/data/test_logs/filtered/load-gen-bad.log"
        # }
    }
}